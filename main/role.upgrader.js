/**
 * @module role.upgrader
 * @description Logique pour le r√¥le d'upgrader.
 */
var actionHarvest = require('action.harvest');

var roleUpgrader = {

    /** 
     * @param {Creep} creep - Le creep qui ex√©cute le r√¥le.
     */
    run: function(creep) {

        // Si le creep est en mode am√©lioration et n'a plus d'√©nergie, il passe en mode r√©colte.
        if(creep.memory.upgrading && creep.store[RESOURCE_ENERGY] == 0) {
            creep.memory.upgrading = false;
            creep.say('üîÑ r√©colte');
        }
        // Si le creep n'est pas en mode am√©lioration et que sa soute est pleine, il passe in mode am√©lioration.
        if(!creep.memory.upgrading && creep.store.getFreeCapacity() == 0) {
            creep.memory.upgrading = true;
            creep.say('‚ö° am√©lioration');
        }

        // Si aucune route vers le contr√¥leur n'a √©t√© planifi√©e, en cr√©e une.
        if (!creep.memory.roadPlanned) {
            const path = creep.pos.findPathTo(creep.room.controller);
            creep.memory.pathToController = path;
            for (const pos of path) {
                // Ne cr√©e pas de site de construction √† l'emplacement du contr√¥leur.
                if (pos.x === creep.room.controller.pos.x && pos.y === creep.room.controller.pos.y) {
                    continue; // Passe √† la position suivante.
                }
                creep.room.createConstructionSite(pos.x, pos.y, STRUCTURE_ROAD);
            }
            creep.memory.roadPlanned = true;
        }

        // Si le creep est en mode am√©lioration.
        if(creep.memory.upgrading) {
            // Se d√©place vers le contr√¥leur et l'am√©liore.
            if(creep.upgradeController(creep.room.controller) == ERR_NOT_IN_RANGE) {
                creep.moveTo(creep.room.controller, {visualizePathStyle: {stroke: '#ffffff'}});
            }
        }
        // Sinon, il r√©colte de l'√©nergie.
        else {
            actionHarvest.run(creep);
        }
    }
};

module.exports = roleUpgrader;